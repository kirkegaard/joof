#!/usr/bin/env node

const https = require('https')
const fs = require('fs')
const path = require('path')
const promisify = require('util').promisify
const home = require('user-home')

const joofDir = path.join(home, '.js')

function handler (req, res) {
  handleUrl(req.url)
    .then(
      body => {
        res.setHeader('Access-Control-Allow-Origin', '*')
        res.setHeader('Content-Type', 'text/javascript')
        res.write(body)
        res.end()
      },
      err => {
        res.end()
        throw err
      }
    )
    .catch(err => {
      res.end()
      throw err
    })
}

async function handleUrl (url) {
  const jsPath = path.join(joofDir, url)
  const cssPath = jsPath.replace(/\.js$/, '.css')

  let jsContent = (await readFile(jsPath)) || ''
  const cssContent = await readFile(cssPath)

  if (cssContent) {
    jsContent += injectStyles(cssContent)
  }

  return jsContent
}

const readFilePromise = promisify(fs.readFile)
async function readFile (path) {
  try {
    const content = await readFilePromise(path)
    return content
  } catch (err) {
    if (err.code !== 'ENOENT') {
      throw err
    }
    return undefined
  }
}

function injectStyles (css) {
  return `
function _joofInject() {var d=document;var e = d.createElement('style');e.innerHTML=\`\n${css}\`;d.body.appendChild(e);};_joofInject()`
}

const options = {
  key: fs.readFileSync(path.join(__dirname, 'certs', 'self-signed.key')),
  cert: fs.readFileSync(path.join(__dirname, 'certs', 'self-signed.cert'))
}

const server = https.createServer(options, handler)
server.listen(3131, err => {
  if (err) throw err
  console.log('running on :3131')
})

// sudo security add-trusted-cert -p ssl -d -r trustRoot -k ~/Library/Keychains/login.keychain localhost.crt
